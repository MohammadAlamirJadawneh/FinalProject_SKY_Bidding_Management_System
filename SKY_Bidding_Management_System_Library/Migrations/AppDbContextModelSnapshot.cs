// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SKY_Bidding_Management_System_Library.Data;

#nullable disable

namespace SKY_Bidding_Management_System_Library.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BidderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TechnicalSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("BidId");

                    b.HasIndex("BidderId");

                    b.HasIndex("TenderId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            BidId = 1,
                            Address = "123 Street",
                            BidderId = "1b1959a1-0e94-497f-bfca-69388716b042",
                            CompanyName = "ABC Corp",
                            Email = "contact@abccorp.com",
                            Phone = "123-456-7890",
                            RegistrationNumber = "REG123",
                            SubmissionDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 1
                        },
                        new
                        {
                            BidId = 2,
                            Address = "456 Avenue",
                            BidderId = "1b1959a1-0e94-497f-bfca-69388716b042",
                            CompanyName = "XYZ Ltd",
                            Email = "contact@xyzltd.com",
                            Phone = "987-654-3210",
                            RegistrationNumber = "REG124",
                            SubmissionDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 2
                        },
                        new
                        {
                            BidId = 3,
                            Address = "789 Road",
                            BidderId = "1b1959a1-0e94-497f-bfca-69388716b042",
                            CompanyName = "Tech Solutions",
                            Email = "support@techsol.com",
                            Phone = "321-654-9870",
                            RegistrationNumber = "REG125",
                            SubmissionDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 3
                        },
                        new
                        {
                            BidId = 4,
                            Address = "1010 Lane",
                            BidderId = "1b1959a1-0e94-497f-bfca-69388716b042",
                            CompanyName = "Innovate Ltd",
                            Email = "info@innovate.com",
                            Phone = "654-321-0987",
                            RegistrationNumber = "REG126",
                            SubmissionDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 4
                        },
                        new
                        {
                            BidId = 5,
                            Address = "2020 Blvd",
                            BidderId = "1b1959a1-0e94-497f-bfca-69388716b042",
                            CompanyName = "Global Ventures",
                            Email = "contact@globalventures.com",
                            Phone = "432-567-1234",
                            RegistrationNumber = "REG127",
                            SubmissionDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.BidDocument", b =>
                {
                    b.Property<int>("BidDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidDocumentId"));

                    b.Property<string>("BidDocumentContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("BidDocumentData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("BidDocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BidDocumentUploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BidId")
                        .HasColumnType("int");

                    b.HasKey("BidDocumentId");

                    b.HasIndex("BidId");

                    b.ToTable("BidDocuments");

                    b.HasData(
                        new
                        {
                            BidDocumentId = 1,
                            BidDocumentContentType = "application/pdf",
                            BidDocumentName = "Proposal Document 1",
                            BidDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BidId = 1
                        },
                        new
                        {
                            BidDocumentId = 2,
                            BidDocumentContentType = "application/pdf",
                            BidDocumentName = "Proposal Document 2",
                            BidDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BidId = 2
                        },
                        new
                        {
                            BidDocumentId = 3,
                            BidDocumentContentType = "application/pdf",
                            BidDocumentName = "Proposal Document 3",
                            BidDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BidId = 3
                        },
                        new
                        {
                            BidDocumentId = 4,
                            BidDocumentContentType = "application/pdf",
                            BidDocumentName = "Proposal Document 4",
                            BidDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BidId = 4
                        },
                        new
                        {
                            BidDocumentId = 5,
                            BidDocumentContentType = "application/pdf",
                            BidDocumentName = "Proposal Document 5",
                            BidDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BidId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.BidEvaluation", b =>
                {
                    b.Property<int>("BidEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidEvaluationId"));

                    b.Property<string>("BidEvaluationNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BidEvaluationScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BidId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BidEvaluationId");

                    b.HasIndex("BidId");

                    b.ToTable("BidEvaluations");

                    b.HasData(
                        new
                        {
                            BidEvaluationId = 1,
                            BidEvaluationNotes = "Competent bid with clear financial breakdown.",
                            BidEvaluationScore = 83m,
                            BidId = 1,
                            EvaluatedAt = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BidEvaluationId = 2,
                            BidEvaluationNotes = "Missing some important documents in the bid.",
                            BidEvaluationScore = 75m,
                            BidId = 2,
                            EvaluatedAt = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BidEvaluationId = 3,
                            BidEvaluationNotes = "Well-executed bid with excellent risk management plan.",
                            BidEvaluationScore = 90m,
                            BidId = 3,
                            EvaluatedAt = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BidEvaluationId = 4,
                            BidEvaluationNotes = "Technical proposal needs more clarity.",
                            BidEvaluationScore = 80m,
                            BidId = 4,
                            EvaluatedAt = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BidEvaluationId = 5,
                            BidEvaluationNotes = "Strong team experience, bid is well-presented.",
                            BidEvaluationScore = 87m,
                            BidId = 5,
                            EvaluatedAt = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.EligibilityCriteria", b =>
                {
                    b.Property<int>("EligibilityCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EligibilityCriteriaId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("EligibilityCriteriaId");

                    b.ToTable("EligibilityCriterias");

                    b.HasData(
                        new
                        {
                            EligibilityCriteriaId = 1,
                            Description = "Must have at least 3 years of experience in construction.",
                            TenderId = 1
                        },
                        new
                        {
                            EligibilityCriteriaId = 2,
                            Description = "Company must be ISO certified.",
                            TenderId = 2
                        },
                        new
                        {
                            EligibilityCriteriaId = 3,
                            Description = "Proposals should include a sustainability plan.",
                            TenderId = 3
                        },
                        new
                        {
                            EligibilityCriteriaId = 4,
                            Description = "Must provide references from past projects.",
                            TenderId = 4
                        },
                        new
                        {
                            EligibilityCriteriaId = 5,
                            Description = "Bidder must have a local office in the country.",
                            TenderId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.FinancialProposalItem", b =>
                {
                    b.Property<int>("FinancialProposalItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialProposalItemId"));

                    b.Property<int>("BidId")
                        .HasColumnType("int");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FinancialProposalItemId");

                    b.HasIndex("BidId");

                    b.ToTable("FinancialProposalItems");

                    b.HasData(
                        new
                        {
                            FinancialProposalItemId = 1,
                            BidId = 1,
                            ItemDescription = "Construction material",
                            Quantity = 100,
                            UnitPrice = 50m
                        },
                        new
                        {
                            FinancialProposalItemId = 2,
                            BidId = 1,
                            ItemDescription = "Labor costs",
                            Quantity = 200,
                            UnitPrice = 30m
                        },
                        new
                        {
                            FinancialProposalItemId = 3,
                            BidId = 2,
                            ItemDescription = "Equipment rental",
                            Quantity = 5,
                            UnitPrice = 1500m
                        },
                        new
                        {
                            FinancialProposalItemId = 4,
                            BidId = 2,
                            ItemDescription = "Consulting services",
                            Quantity = 10,
                            UnitPrice = 250m
                        },
                        new
                        {
                            FinancialProposalItemId = 5,
                            BidId = 3,
                            ItemDescription = "Training sessions",
                            Quantity = 8,
                            UnitPrice = 500m
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTermId"));

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentSchedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PenaltiesForDelays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTermId");

                    b.ToTable("PaymentTerms");

                    b.HasData(
                        new
                        {
                            PaymentTermId = 1,
                            PaymentMethod = "Bank Transfer",
                            PaymentSchedule = "Monthly",
                            PenaltiesForDelays = "1% per week"
                        },
                        new
                        {
                            PaymentTermId = 2,
                            PaymentMethod = "Cheque",
                            PaymentSchedule = "Quarterly",
                            PenaltiesForDelays = "2% per month"
                        },
                        new
                        {
                            PaymentTermId = 3,
                            PaymentMethod = "Bank Transfer",
                            PaymentSchedule = "Upon Completion",
                            PenaltiesForDelays = "3% total"
                        },
                        new
                        {
                            PaymentTermId = 4,
                            PaymentMethod = "Cash",
                            PaymentSchedule = "Bi-weekly",
                            PenaltiesForDelays = "0.5% per day"
                        },
                        new
                        {
                            PaymentTermId = 5,
                            PaymentMethod = "Online",
                            PaymentSchedule = "Annually",
                            PenaltiesForDelays = "5% annual fee"
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.SubmissionGuideline", b =>
                {
                    b.Property<int>("SubmissionGuidelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionGuidelineId"));

                    b.Property<string>("CompanyProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialProposal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalProposal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionGuidelineId");

                    b.HasIndex("TenderId");

                    b.ToTable("SubmissionGuidelines");

                    b.HasData(
                        new
                        {
                            SubmissionGuidelineId = 1,
                            CompanyProfile = "Company history and portfolio",
                            FinancialProposal = "Complete cost breakdown",
                            RequiredDocument = "Company Registration Certificate",
                            TechnicalProposal = "Detailed technical proposal with methodology",
                            TenderId = 1
                        },
                        new
                        {
                            SubmissionGuidelineId = 2,
                            CompanyProfile = "Company team structure",
                            FinancialProposal = "Estimated budget for project",
                            RequiredDocument = "Proof of experience",
                            TechnicalProposal = "Project approach and team qualifications",
                            TenderId = 2
                        },
                        new
                        {
                            SubmissionGuidelineId = 3,
                            CompanyProfile = "Mission and vision statement",
                            FinancialProposal = "Financial stability report",
                            RequiredDocument = "Certifications",
                            TechnicalProposal = "Risk mitigation strategy",
                            TenderId = 3
                        },
                        new
                        {
                            SubmissionGuidelineId = 4,
                            CompanyProfile = "Company management details",
                            FinancialProposal = "Cost analysis",
                            RequiredDocument = "Past project references",
                            TechnicalProposal = "Solution design",
                            TenderId = 4
                        },
                        new
                        {
                            SubmissionGuidelineId = 5,
                            CompanyProfile = "Client portfolio",
                            FinancialProposal = "Cost breakdown for phases",
                            RequiredDocument = "Tax registration",
                            TechnicalProposal = "Project timeline",
                            TenderId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.SupportingDocument", b =>
                {
                    b.Property<int>("SupportingDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupportingDocumentId"));

                    b.Property<int>("BidId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupportingDocumentId");

                    b.HasIndex("BidId");

                    b.ToTable("SupportingDocuments");

                    b.HasData(
                        new
                        {
                            SupportingDocumentId = 1,
                            BidId = 1,
                            Description = "Document certifying the company's tax registration",
                            DocumentName = "Tax Registration"
                        },
                        new
                        {
                            SupportingDocumentId = 2,
                            BidId = 1,
                            Description = "International quality management certification",
                            DocumentName = "ISO Certification"
                        },
                        new
                        {
                            SupportingDocumentId = 3,
                            BidId = 2,
                            Description = "Detailed profile of the bidding company",
                            DocumentName = "Company Profile"
                        },
                        new
                        {
                            SupportingDocumentId = 4,
                            BidId = 3,
                            Description = "Audit report confirming financial stability",
                            DocumentName = "Financial Stability Report"
                        },
                        new
                        {
                            SupportingDocumentId = 5,
                            BidId = 4,
                            Description = "Client references from past projects",
                            DocumentName = "References"
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.Tender", b =>
                {
                    b.Property<int>("TenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EligibilityCriteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TenderBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TenderClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TenderIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenderIssuedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenderTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderTypeId")
                        .HasColumnType("int");

                    b.HasKey("TenderId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TenderIssuedBy");

                    b.HasIndex("TenderTypeId");

                    b.ToTable("Tenders");

                    b.HasData(
                        new
                        {
                            TenderId = 1,
                            CategoryId = 1,
                            EligibilityCriteria = "Must have 5 years of experience",
                            Email = "contact@tender1.com",
                            IndustryId = 1,
                            LocationId = 1,
                            TenderBudget = 500000m,
                            TenderClosingDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderDescription = "Bridge construction project",
                            TenderIssueDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderIssuedBy = "1b1959a1-0e94-497f-bfca-69388716b042",
                            TenderStatus = "Open",
                            TenderTitle = "Construction of Bridge",
                            TenderTypeId = 1
                        },
                        new
                        {
                            TenderId = 2,
                            CategoryId = 2,
                            EligibilityCriteria = "Must be registered contractor",
                            Email = "contact@tender2.com",
                            IndustryId = 1,
                            LocationId = 2,
                            TenderBudget = 200000m,
                            TenderClosingDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderDescription = "Maintenance of roads",
                            TenderIssueDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderIssuedBy = "1b1959a1-0e94-497f-bfca-69388716b042",
                            TenderStatus = "Closed",
                            TenderTitle = "Road Maintenance",
                            TenderTypeId = 2
                        },
                        new
                        {
                            TenderId = 3,
                            CategoryId = 3,
                            EligibilityCriteria = "Must have renovation experience",
                            Email = "contact@tender3.com",
                            IndustryId = 2,
                            LocationId = 3,
                            TenderBudget = 300000m,
                            TenderClosingDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderDescription = "Renovation of office building",
                            TenderIssueDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderIssuedBy = "1b1959a1-0e94-497f-bfca-69388716b042",
                            TenderStatus = "Open",
                            TenderTitle = "Building Renovation",
                            TenderTypeId = 3
                        },
                        new
                        {
                            TenderId = 4,
                            CategoryId = 4,
                            EligibilityCriteria = "Certified structural engineers only",
                            Email = "contact@tender4.com",
                            IndustryId = 2,
                            LocationId = 4,
                            TenderBudget = 100000m,
                            TenderClosingDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderDescription = "Inspection of old bridges",
                            TenderIssueDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderIssuedBy = "1b1959a1-0e94-497f-bfca-69388716b042",
                            TenderStatus = "Open",
                            TenderTitle = "Bridge Inspection",
                            TenderTypeId = 1
                        },
                        new
                        {
                            TenderId = 5,
                            CategoryId = 5,
                            EligibilityCriteria = "Must have large scale project experience",
                            Email = "contact@tender5.com",
                            IndustryId = 1,
                            LocationId = 5,
                            TenderBudget = 1000000m,
                            TenderClosingDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderDescription = "New bridge construction",
                            TenderIssueDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderIssuedBy = "1b1959a1-0e94-497f-bfca-69388716b042",
                            TenderStatus = "Closed",
                            TenderTitle = "Bridge Construction",
                            TenderTypeId = 2
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderAward", b =>
                {
                    b.Property<int>("TenderAwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderAwardId"));

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AwardStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BidId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("TenderAwardId");

                    b.HasIndex("BidId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderAwards");

                    b.HasData(
                        new
                        {
                            TenderAwardId = 1,
                            AwardDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AwardStatus = "Awarded",
                            BidId = 1,
                            TenderId = 1
                        },
                        new
                        {
                            TenderAwardId = 2,
                            AwardDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AwardStatus = "Awarded",
                            BidId = 2,
                            TenderId = 2
                        },
                        new
                        {
                            TenderAwardId = 3,
                            AwardDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AwardStatus = "Awarded",
                            BidId = 3,
                            TenderId = 3
                        },
                        new
                        {
                            TenderAwardId = 4,
                            AwardDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AwardStatus = "Awarded",
                            BidId = 4,
                            TenderId = 4
                        },
                        new
                        {
                            TenderAwardId = 5,
                            AwardDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AwardStatus = "Awarded",
                            BidId = 5,
                            TenderId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderCategory", b =>
                {
                    b.Property<int>("TenderCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderCategoryId"));

                    b.Property<string>("TenderCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenderCategoryId");

                    b.ToTable("TenderCategories");

                    b.HasData(
                        new
                        {
                            TenderCategoryId = 1,
                            TenderCategoryName = "Construction"
                        },
                        new
                        {
                            TenderCategoryId = 2,
                            TenderCategoryName = "IT Services"
                        },
                        new
                        {
                            TenderCategoryId = 3,
                            TenderCategoryName = "Consulting"
                        },
                        new
                        {
                            TenderCategoryId = 4,
                            TenderCategoryName = "Healthcare"
                        },
                        new
                        {
                            TenderCategoryId = 5,
                            TenderCategoryName = "Transport"
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderDocument", b =>
                {
                    b.Property<int>("TenderDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderDocumentId"));

                    b.Property<string>("DocumentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenderDocumentContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("TenderDocumentData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TenderDocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TenderDocumentUploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("TenderDocumentId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderDocuments");

                    b.HasData(
                        new
                        {
                            TenderDocumentId = 1,
                            TenderDocumentContentType = "application/pdf",
                            TenderDocumentName = "Tender Document 1",
                            TenderDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 1
                        },
                        new
                        {
                            TenderDocumentId = 2,
                            TenderDocumentContentType = "application/pdf",
                            TenderDocumentName = "Tender Document 2",
                            TenderDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 2
                        },
                        new
                        {
                            TenderDocumentId = 3,
                            TenderDocumentContentType = "application/pdf",
                            TenderDocumentName = "Tender Document 3",
                            TenderDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 3
                        },
                        new
                        {
                            TenderDocumentId = 4,
                            TenderDocumentContentType = "application/pdf",
                            TenderDocumentName = "Tender Document 4",
                            TenderDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 4
                        },
                        new
                        {
                            TenderDocumentId = 5,
                            TenderDocumentContentType = "application/pdf",
                            TenderDocumentName = "Tender Document 5",
                            TenderDocumentUploadedDate = new DateTime(2023, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TenderId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderEligibility", b =>
                {
                    b.Property<int>("TenderEligibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderEligibilityId"));

                    b.Property<bool>("CompliesWithIndustryStandards")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMinimumExperience")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPastExperience")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinanciallyStable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegisteredCompany")
                        .HasColumnType("bit");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("TenderEligibilityId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderEligibilities");

                    b.HasData(
                        new
                        {
                            TenderEligibilityId = 1,
                            CompliesWithIndustryStandards = true,
                            HasMinimumExperience = true,
                            HasPastExperience = true,
                            IsFinanciallyStable = true,
                            IsRegisteredCompany = true,
                            TenderId = 1
                        },
                        new
                        {
                            TenderEligibilityId = 2,
                            CompliesWithIndustryStandards = true,
                            HasMinimumExperience = false,
                            HasPastExperience = false,
                            IsFinanciallyStable = true,
                            IsRegisteredCompany = true,
                            TenderId = 2
                        },
                        new
                        {
                            TenderEligibilityId = 3,
                            CompliesWithIndustryStandards = false,
                            HasMinimumExperience = true,
                            HasPastExperience = true,
                            IsFinanciallyStable = true,
                            IsRegisteredCompany = true,
                            TenderId = 3
                        },
                        new
                        {
                            TenderEligibilityId = 4,
                            CompliesWithIndustryStandards = true,
                            HasMinimumExperience = true,
                            HasPastExperience = true,
                            IsFinanciallyStable = false,
                            IsRegisteredCompany = true,
                            TenderId = 4
                        },
                        new
                        {
                            TenderEligibilityId = 5,
                            CompliesWithIndustryStandards = true,
                            HasMinimumExperience = true,
                            HasPastExperience = true,
                            IsFinanciallyStable = true,
                            IsRegisteredCompany = false,
                            TenderId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderEvaluation", b =>
                {
                    b.Property<int>("TenderEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderEvaluationId"));

                    b.Property<decimal>("ScoreTenderEvaluation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenderEvaluationNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("TenderEvaluationId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderEvaluations");

                    b.HasData(
                        new
                        {
                            TenderEvaluationId = 1,
                            ScoreTenderEvaluation = 85m,
                            TenderEvaluationNotes = "Good proposal with solid budget and timeline.",
                            TenderId = 1
                        },
                        new
                        {
                            TenderEvaluationId = 2,
                            ScoreTenderEvaluation = 78m,
                            TenderEvaluationNotes = "Proposal needs improvement on the technical side.",
                            TenderId = 2
                        },
                        new
                        {
                            TenderEvaluationId = 3,
                            ScoreTenderEvaluation = 92m,
                            TenderEvaluationNotes = "Excellent proposal, well-aligned with the project goals.",
                            TenderId = 3
                        },
                        new
                        {
                            TenderEvaluationId = 4,
                            ScoreTenderEvaluation = 80m,
                            TenderEvaluationNotes = "Average proposal, a few key areas need more detail.",
                            TenderId = 4
                        },
                        new
                        {
                            TenderEvaluationId = 5,
                            ScoreTenderEvaluation = 88m,
                            TenderEvaluationNotes = "Strong technical background, proposal is well-structured.",
                            TenderId = 5
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderIndustry", b =>
                {
                    b.Property<int>("TenderIndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderIndustryId"));

                    b.Property<string>("TenderIndustryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenderIndustryId");

                    b.ToTable("TenderIndustries");

                    b.HasData(
                        new
                        {
                            TenderIndustryId = 1,
                            TenderIndustryName = "Energy"
                        },
                        new
                        {
                            TenderIndustryId = 2,
                            TenderIndustryName = "Technology"
                        },
                        new
                        {
                            TenderIndustryId = 3,
                            TenderIndustryName = "Telecom"
                        },
                        new
                        {
                            TenderIndustryId = 4,
                            TenderIndustryName = "Agriculture"
                        },
                        new
                        {
                            TenderIndustryId = 5,
                            TenderIndustryName = "Manufacturing"
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderLocation", b =>
                {
                    b.Property<int>("TenderLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderLocationId"));

                    b.Property<string>("TenderLocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenderLocationId");

                    b.ToTable("TenderLocations");

                    b.HasData(
                        new
                        {
                            TenderLocationId = 1,
                            TenderLocationName = "Amman"
                        },
                        new
                        {
                            TenderLocationId = 2,
                            TenderLocationName = "Irbid"
                        },
                        new
                        {
                            TenderLocationId = 3,
                            TenderLocationName = "Aqaba"
                        },
                        new
                        {
                            TenderLocationId = 4,
                            TenderLocationName = "Zarqa"
                        },
                        new
                        {
                            TenderLocationId = 5,
                            TenderLocationName = "Madaba"
                        });
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderType", b =>
                {
                    b.Property<int>("TenderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderTypeId"));

                    b.Property<string>("TenderTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenderTypeId");

                    b.ToTable("TenderTypes");

                    b.HasData(
                        new
                        {
                            TenderTypeId = 1,
                            TenderTypeName = "Open"
                        },
                        new
                        {
                            TenderTypeId = 2,
                            TenderTypeName = "Selective"
                        },
                        new
                        {
                            TenderTypeId = 3,
                            TenderTypeName = "Negotiated"
                        },
                        new
                        {
                            TenderTypeId = 4,
                            TenderTypeName = "Framework Agreement"
                        },
                        new
                        {
                            TenderTypeId = 5,
                            TenderTypeName = "Dynamic Purchasing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.Bid", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.AppUser", "Bidder")
                        .WithMany()
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Tender", "Tender")
                        .WithMany()
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bidder");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.BidDocument", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Bid", "Bid")
                        .WithMany("BidDocument")
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.BidEvaluation", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Bid", "Bid")
                        .WithMany()
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.FinancialProposalItem", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Bid", "Bid")
                        .WithMany("FinancialProposalItems")
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.SubmissionGuideline", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Tender", "Tender")
                        .WithMany("SubmissionGuidelines")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.SupportingDocument", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Bid", "Bid")
                        .WithMany()
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.Tender", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.TenderCategory", "TenderCategory")
                        .WithMany("Tenders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.TenderIndustry", "TenderIndustry")
                        .WithMany("Tenders")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.TenderLocation", "TenderLocation")
                        .WithMany("Tenders")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.AppUser", "TenderUser")
                        .WithMany()
                        .HasForeignKey("TenderIssuedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.TenderType", "TenderType")
                        .WithMany("Tenders")
                        .HasForeignKey("TenderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TenderCategory");

                    b.Navigation("TenderIndustry");

                    b.Navigation("TenderLocation");

                    b.Navigation("TenderType");

                    b.Navigation("TenderUser");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderAward", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Bid", "Bid")
                        .WithMany()
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Tender", "Tender")
                        .WithMany()
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bid");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderDocument", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Tender", "Tender")
                        .WithMany("TenderDocument")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderEligibility", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Tender", "Tender")
                        .WithMany()
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderEvaluation", b =>
                {
                    b.HasOne("SKY_Bidding_Management_System_Library.Data.Models.Tender", "Tender")
                        .WithMany("TenderEvaluations")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.Bid", b =>
                {
                    b.Navigation("BidDocument");

                    b.Navigation("FinancialProposalItems");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.Tender", b =>
                {
                    b.Navigation("SubmissionGuidelines");

                    b.Navigation("TenderDocument");

                    b.Navigation("TenderEvaluations");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderCategory", b =>
                {
                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderIndustry", b =>
                {
                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderLocation", b =>
                {
                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("SKY_Bidding_Management_System_Library.Data.Models.TenderType", b =>
                {
                    b.Navigation("Tenders");
                });
#pragma warning restore 612, 618
        }
    }
}
